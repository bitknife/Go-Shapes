syntax = "proto3";

package messages;

option go_package = "./shared";

/*
    None game-related messages
 */

message PlayerLogin {
    string username = 1;
    string password = 2;
}

message PlayerLogout {
    string username = 1;
}

message Ping {
    uint64 sent = 1;
    uint64 bounced = 2;
    uint64 received = 3;
}

message MouseInput {
    // For communicating exact mose movements, dont use in games, better abstract control type
    int32 mouse_x = 1;
    int32 mouse_y = 2;
    bool right_click = 3;
    bool left_click = 4;
}

message PlayerMovement {
    int32 deg = 1;
    int32 vel = 2;
    int32 acc = 3;
}

message PlayerAction {
    // Not sure how to model this properly, how generic it should be etc.
    bool primary = 1;
    bool secondary = 2;

    map<string, string> StrAttrs = 10;
}

/*
    GameObjectEvent:
        Sent by server to clients.
        Manages lifecycle and basic properties of all GameObjects.
        Other more specific events for certain classes sets more
            specific attributes.

    Client:
    - SPAWNS or REMOVES representations.

*/
enum GameObjectKind {
    DOT = 0;
    DIAMOND = 1;
}
message GameObject {
    string Id = 1;
    string Action = 2;

    // Server frame this happened in
    int64 Tick = 3;

    // What class (on client typically) to spawn.
    GameObjectKind Kind = 4;

    // Translation within current segment
    int32 X = 5;
    int32 Y = 6;
    int32 Z = 7;
    // Width and height
    int32 W = 8;
    int32 H = 9;
    // Rotation in degrees
    int32 R = 10;

    // Initial values for this specific class to be set during this action
    map<string, string> StrAttrs = 11;
    map<string, int32> IntAttrs = 12;
    map<string, float> FlAttrs = 13;
}

/*
    https://protobuf.dev/programming-guides/proto3/#maps
 */
message SetGameObjectAttributes {
    string id = 1;
    map<string, string> attributes = 2;
}

message Packet {
    oneof payload {
        PlayerLogin playerLogin = 1;
        PlayerLogout playerLogout = 2;
        Ping ping = 3;

        MouseInput mouseInput = 4;
        PlayerMovement playerMovement = 5;
        PlayerAction playerAction = 6;

        GameObject gameObject = 10;
        SetGameObjectAttributes setGameObjectAttributes = 11;
    }
}
